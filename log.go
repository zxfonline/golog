// Copyright 2016 zxfonline@sina.com. All rights reserved.
// Use of this source code is governed by a BSD-style
// license that can be found in the LICENSE file.

package golog

import (
	"fmt"
	"io"
	"runtime"
	"runtime/debug"
	"sync"
	"time"
)

// These flags define which text to prefix to each log entry generated by the Logger.
const (
	// Bits or'ed together to control what's printed. There is no control over the
	// order they appear (the order listed here) or the format they present (as
	// described in the comments).  A colon appears after these items:
	//	2009/01/23 01:23:23.123123 /a/b/c/d.go:23: message
	Ldate         = 1 << iota // the date: 2009/01/23
	Ltime                     // the time: 01:23:23
	Lmicroseconds             // microsecond resolution: 01:23:23.123123.  assumes Ltime.

	Llongfile  // full file name and line number: /a/b/c/d.go:23
	Lshortfile // final file name element and line number: d.go:23. overrides Llongfile

	Lconsole   //控制台是否同时输出
	Lfilexport //日志文件是否输出

	LstdFlags = Ldate | Lmicroseconds | Lshortfile //标准输出格式
)

type LogLevel int

const (
	LEVEL_DEBUG LogLevel = iota
	LEVEL_INFO
	LEVEL_WARN
	LEVEL_ERROR
	LEVEL_FATAL
	LEVEL_LOG
)

var LevelString = [...]string{
	"[DEBUG]",
	"[INFO ]",
	"[WARN ]",
	"[ERROR]",
	"[FATAL]",
	"[LOG  ]",
}

func init() {
	if runtime.GOOS != "windows" {
		LevelString = [...]string{
			"\033[033;1m[DEBUG]\033[033;0m",
			"\033[034;1m[INFO ]\033[034;0m",
			"\033[045;1m[WARN ]\033[045;0m",
			"\033[041;1m[ERROR]\033[041;0m",
			"\033[041;1m[FATAL]\033[041;0m",
			"\033[032;1m[LOG  ]\033[032;0m",
		}
	}
}

// A Logger represents an active logging object that generates lines of
// output to an io.Writer.  Each logging operation makes a single call to
// the Writer's Write method.  A Logger can be used simultaneously from
// multiple goroutines; it guarantees to serialize access to the Writer.
type Logger struct {
	mu    sync.Mutex // ensures atomic writes; protects the following fields
	Flag  int        // properties
	Out   io.Writer  // destination for output
	buf   []byte     // for accumulating text to write
	Level LogLevel
	Name  string
	Trace bool
}

// New creates a new Logger.   The out variable sets the
// destination to which log data will be written.
// The prefix appears at the beginning of each generated log line.
// The flag argument defines the logging properties.
func New(name string) *Logger {
	return add(name)
}

// New creates a new Logger.   The out variable sets the
// destination to which log data will be written.
// The prefix appears at the beginning of each generated log line.
// The flag argument defines the logging properties.
func NewExt(name string, Out io.Writer, Flag int) *Logger {
	return &Logger{Out: Out, Flag: Flag, Name: name, Trace: DUMPSTACK_OPEN}
}

// Cheap integer to fixed-width decimal ASCII.  Give a negative width to avoid zero-padding.
// Knows the buffer has capacity.
func itoa(buf *[]byte, i int, wid int) {
	var u uint = uint(i)
	if u == 0 && wid <= 1 {
		*buf = append(*buf, '0')
		return
	}
	// Assemble decimal in reverse order.
	var b [32]byte
	bp := len(b)
	for ; u > 0 || wid > 0; u /= 10 {
		bp--
		wid--
		b[bp] = byte(u%10) + '0'
	}
	*buf = append(*buf, b[bp:]...)
}

func formatHeader(flag int, buf *[]byte, t time.Time, file string, line int, prefix string) {
	if flag&(Ldate|Ltime|Lmicroseconds) != 0 {
		if flag&Ldate != 0 {
			year, month, day := t.Date()
			itoa(buf, year, 4)
			*buf = append(*buf, '/')
			itoa(buf, int(month), 2)
			*buf = append(*buf, '/')
			itoa(buf, day, 2)
			*buf = append(*buf, ' ')
		}
		if flag&(Ltime|Lmicroseconds) != 0 {
			hour, min, sec := t.Clock()
			itoa(buf, hour, 2)
			*buf = append(*buf, ':')
			itoa(buf, min, 2)
			*buf = append(*buf, ':')
			itoa(buf, sec, 2)
			if flag&Lmicroseconds != 0 {
				*buf = append(*buf, '.')
				itoa(buf, t.Nanosecond()/1e3, 6)
			}
			*buf = append(*buf, ' ')
		}
	}

	if prefix != "" {
		*buf = append(*buf, prefix...)
		*buf = append(*buf, ' ')
	}
	if flag&(Lshortfile|Llongfile) != 0 {
		if flag&Lshortfile != 0 {
			short := file
			for i := len(file) - 1; i > 0; i-- {
				if file[i] == '/' {
					short = file[i+1:]
					break
				}
			}
			file = short
		}
		*buf = append(*buf, file...)
		*buf = append(*buf, ':')
		itoa(buf, line, -1)
		*buf = append(*buf, ": "...)
	} else {
		*buf = append(*buf, ": "...)
	}
}

// output writes the output for a logging event.  The string s contains
// the text to print after the prefix specified by the flags of the
// Logger.  A newline is appended if the last character of s is not
// already a newline.  Calldepth is used to recover the PC and is
// provided for generality, although at the moment on all pre-defined
// paths it will be 2.
func (l *Logger) output(level LogLevel, calldepth int, prefix string, s string) {
	t := time.Now() // get this early.
	var file string
	var line int
	l.mu.Lock()
	defer l.mu.Unlock()
	flag := l.Flag
	out := l.Out
	if flag&(Lshortfile|Llongfile) != 0 {
		// release lock while getting caller info - it's expensive.
		l.mu.Unlock()
		var ok bool
		_, file, line, ok = runtime.Caller(calldepth)
		if !ok {
			file = "???"
			line = 0
		}
		l.mu.Lock()
	}
	buf := l.buf[:0]
	formatHeader(flag, &buf, t, file, line, prefix)
	buf = append(buf, s...)
	if len(s) > 0 && s[len(s)-1] != '\n' {
		buf = append(buf, '\n')
	}
	if l.Trace {
		switch level {
		case LEVEL_ERROR, LEVEL_FATAL:
			buf = append(buf, "Stack:\n"...)
			buf = append(buf, debug.Stack()...)
		default:
		}
	}
	//	var err error
	if flag&Lfilexport != 0 {
		/*_, err =*/ out.Write(buf)
	} else if level == LEVEL_LOG && (LstaticIo != defaultWriter || flag&Lconsole == 0) {
		//保证该操作日志必须打印出来
		/*_, err =*/
		LstaticIo.Write(buf)
	}
	if flag&Lconsole != 0 {
		/*_, err =*/ defaultWriter.Write(buf)
	}
	//	if err != nil {
	//		fmt.Printf("write log err:%v\n", err)
	//	}
}

func (l *Logger) log(level LogLevel, calldepth int, format string, v ...interface{}) {
	if level == LEVEL_LOG {
		if format == "" {
			l.output(level, calldepth, fmt.Sprintf("%s %s", LevelString[level], l.Name), fmt.Sprintln(v...))
		} else {
			l.output(level, calldepth, fmt.Sprintf("%s %s", LevelString[level], l.Name), fmt.Sprintf(format, v...))
		}
	} else if int(level) >= int(l.Level) {
		if format == "" {
			l.output(level, calldepth, fmt.Sprintf("%s %s", LevelString[level], l.Name), fmt.Sprintln(v...))
		} else {
			l.output(level, calldepth, fmt.Sprintf("%s %s", LevelString[level], l.Name), fmt.Sprintf(format, v...))
		}
	}
}

//根据日志等级输出
func (l *Logger) Println(level LogLevel, v ...interface{}) {
	l.log(level, 3, "", v...)
}

//根据日志等级格式化输出
func (l *Logger) Printf(level LogLevel, format string, v ...interface{}) {
	l.log(level, 3, format, v...)
}

//操作日志输出
func (l *Logger) Logf(format string, v ...interface{}) {
	l.log(LEVEL_LOG, 3, format, v...)
}

//操作日志输出
func (l *Logger) Logln(v ...interface{}) {
	l.log(LEVEL_LOG, 3, "", v...)
}

//调试消息输出
func (l *Logger) Debugf(format string, v ...interface{}) {
	l.log(LEVEL_DEBUG, 3, format, v...)
}

//调试消息输出
func (l *Logger) Debugln(v ...interface{}) {
	l.log(LEVEL_DEBUG, 3, "", v...)
}

//提示消息输出
func (l *Logger) Infof(format string, v ...interface{}) {
	l.log(LEVEL_INFO, 3, format, v...)
}

//提示消息输出
func (l *Logger) Infoln(v ...interface{}) {
	l.log(LEVEL_INFO, 3, "", v...)
}

//警告消息输出
func (l *Logger) Warnf(format string, v ...interface{}) {
	l.log(LEVEL_WARN, 3, format, v...)
}

//警告消息输出
func (l *Logger) Warnln(v ...interface{}) {
	l.log(LEVEL_WARN, 3, "", v...)
}

//错误消息输出
func (l *Logger) Errorf(format string, v ...interface{}) {
	l.log(LEVEL_ERROR, 3, format, v...)
}

//错误消息输出
func (l *Logger) Errorln(v ...interface{}) {
	l.log(LEVEL_ERROR, 3, "", v...)
}

//严重错误消息输出
func (l *Logger) Fatalf(format string, v ...interface{}) {
	l.log(LEVEL_FATAL, 3, format, v...)
}

//严重错误消息输出
func (l *Logger) Fatalln(v ...interface{}) {
	l.log(LEVEL_FATAL, 3, "", v...)
}

//堆栈打印
func (l *Logger) DumpStack(level LogLevel) {
	l.log(level, 3, "\nStack:\n%s", debug.Stack())
}
